cmake_minimum_required(VERSION 3.24)
project(MusicTrainerV3)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Include FetchContent for dependencies
include(FetchContent)

# Fetch GoogleTest
FetchContent_Declare(
	googletest
	GIT_REPOSITORY https://github.com/google/googletest.git
	GIT_TAG release-1.12.1
)
FetchContent_MakeAvailable(googletest)

# Fetch RtMidi
FetchContent_Declare(
	rtmidi
	GIT_REPOSITORY https://github.com/thestk/rtmidi.git
	GIT_TAG 5.0.0
)
FetchContent_MakeAvailable(rtmidi)

# Define source files
set(LIB_SOURCES
	src/domain/music/Pitch.cpp
	src/domain/music/Duration.cpp
	src/domain/music/Interval.cpp
	src/domain/music/Voice.cpp
	src/domain/music/Score.cpp
	src/domain/music/MelodicTemplate.cpp
	src/domain/rules/ParallelFifthsRule.cpp
	src/domain/rules/ParallelOctavesRule.cpp
	src/domain/rules/VoiceLeadingRule.cpp
	src/domain/rules/ValidationPipeline.cpp
	src/domain/events/NoteAddedEvent.cpp
	src/domain/events/EventStore.cpp
	src/domain/events/EventBus.cpp
	src/domain/events/NoteEventHandler.cpp
	src/domain/events/Snapshot.cpp
	src/adapters/InMemoryScoreRepository.cpp
	src/adapters/MockMidiAdapter.cpp
	src/adapters/TemplateBasedExerciseGenerator.cpp
	src/adapters/EventSourcedRepository.cpp
	src/adapters/CachingScoreRepository.cpp
	src/adapters/RtMidiAdapter.cpp
	src/domain/progression/ProgressionSystem.cpp
	src/domain/plugins/PluginManager.cpp)

# Main executable
add_executable(MusicTrainerV3 src/main.cpp ${LIB_SOURCES})
target_include_directories(MusicTrainerV3 PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(MusicTrainerV3 PRIVATE rtmidi)

# Enable testing
enable_testing()

# Configure Plugin System Tests
add_executable(PluginSystemTests 
	tests/plugins/PluginSystemTests.cpp 
	tests/plugins/TestPlugin.cpp 
	${LIB_SOURCES})

target_include_directories(PluginSystemTests PRIVATE ${PROJECT_SOURCE_DIR}/include)

if(WIN32)
	target_link_libraries(PluginSystemTests PRIVATE gtest gtest_main rtmidi)
	set_target_properties(PluginSystemTests PROPERTIES
		ENABLE_EXPORTS ON
		WINDOWS_EXPORT_ALL_SYMBOLS ON)
else()
	target_link_libraries(PluginSystemTests PRIVATE gtest gtest_main rtmidi dl)
endif()

add_test(NAME PluginSystemTests 
		 COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/PluginSystemTests
		 WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

# Configure Validation Pipeline Tests
add_executable(ValidationPipelineTests 
	tests/ValidationPipelineTests.cpp 
	${LIB_SOURCES})
target_include_directories(ValidationPipelineTests PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(ValidationPipelineTests PRIVATE gtest gtest_main rtmidi)
add_test(NAME ValidationPipelineTests COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ValidationPipelineTests)

# Configure Exercise Generation Tests
add_executable(ExerciseGenerationTests 
	tests/ExerciseGenerationTests.cpp 
	${LIB_SOURCES})
target_include_directories(ExerciseGenerationTests PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(ExerciseGenerationTests PRIVATE gtest gtest_main rtmidi)
add_test(NAME ExerciseGenerationTests COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ExerciseGenerationTests)

# Configure MIDI System Tests
add_executable(MidiSystemTests 
	tests/MidiSystemTests.cpp 
	${LIB_SOURCES})
target_include_directories(MidiSystemTests PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(MidiSystemTests PRIVATE gtest gtest_main rtmidi)
add_test(NAME MidiSystemTests COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/MidiSystemTests)

# Configure Repository Tests
add_executable(RepositoryTests 
	tests/RepositoryTests.cpp 
	${LIB_SOURCES})
target_include_directories(RepositoryTests PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(RepositoryTests PRIVATE gtest gtest_main rtmidi)
add_test(NAME RepositoryTests COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/RepositoryTests)

# Configure Progression System Tests
add_executable(ProgressionSystemTests 
	tests/ProgressionSystemTests.cpp 
	${LIB_SOURCES})
target_include_directories(ProgressionSystemTests PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(ProgressionSystemTests PRIVATE gtest gtest_main rtmidi)
add_test(NAME ProgressionSystemTests COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ProgressionSystemTests)