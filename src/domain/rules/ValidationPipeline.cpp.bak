#include "domain/rules/ValidationPipeline.h"
#include "domain/errors/DomainErrors.h"
#include "domain/errors/ErrorHandler.h"
#include <algorithm>
#include <functional>
#include <iostream>
#include <future>


namespace {
	void updateMetrics(music::rules::ValidationPipeline::ValidationMetrics& metrics, bool isHit) {
		if (isHit) {
			metrics.cacheHits++;
		} else {
			metrics.cacheMisses++;
		}
		metrics.ruleExecutions++;
		metrics.cacheHitRate = static_cast<double>(metrics.cacheHits) / 
			(metrics.cacheHits + metrics.cacheMisses);
	}
}

namespace music::rules {

std::unique_ptr<ValidationPipeline> ValidationPipeline::create() {
	return std::unique_ptr<ValidationPipeline>(new ValidationPipeline());
}

void ValidationPipeline::addRule(std::unique_ptr<Rule> rule, std::vector<std::string> dependencies, int priority) {
	auto newRules = rules;
	newRules.emplace_back(std::move(rule), std::move(dependencies), priority);
	rules = std::move(newRules);
	compiled.store(false, std::memory_order_release);
}

void ValidationPipeline::clearRuleCache() {
	ruleCache.clear();
	for (auto& metadata : rules) {
		metadata.lastExecutionTime = std::chrono::microseconds{0};
		metadata.lastValidatedMeasure = 0;
	}
	metrics = ValidationMetrics{};
}



bool ValidationPipeline::evaluateRule(RuleMetadata& metadata, const Score& score, size_t measureIndex) {
	try {
		auto scoreSnapshot = score.createSnapshot();
		
		auto future = std::async(std::launch::async, [&metadata, scoreSnapshot, measureIndex]() {
			Score tempScore(scoreSnapshot);
			return metadata.incremental ? 
				static_cast<IncrementalRule*>(metadata.rule.get())->evaluateIncremental(tempScore, measureIndex, measureIndex + 1) :
				metadata.rule->evaluate(tempScore);
		});
		
		if (future.wait_for(ruleTimeout) == std::future_status::timeout) {
			return false;
		}
		bool ruleResult = future.get();
		
		// Update metrics atomically
		auto currentTime = std::chrono::duration_cast<std::chrono::microseconds>(
			std::chrono::high_resolution_clock::now().time_since_epoch()).count();
		metadata.lastExecutionTime = currentTime;
		metadata.lastValidatedMeasure = measureIndex;
		metrics.ruleExecutions++;
		metrics.totalExecutionTime += currentTime;
		metrics.maxExecutionTime = std::max(metrics.maxExecutionTime, currentTime);
		metrics.avgExecutionTime = metrics.totalExecutionTime / metrics.ruleExecutions;
		
		return ruleResult;
	} catch (const std::exception& e) {
		std::cerr << "[Pipeline::evaluateRule] Error: " << e.what() << std::endl;
		throw;
	}
}




bool ValidationPipeline::validate(const Score& score) {
	try {
		if (!compiled.load(std::memory_order_acquire)) {
			compileRules();
		}
		
		auto scoreSnapshot = score.createSnapshot();
		bool allValid = true;
		std::vector<std::string> pendingViolations;
		
		for (auto& metadata : rules) {
			if (!evaluateRule(metadata, score, 0)) {
				allValid = false;
				pendingViolations.push_back(metadata.rule->getViolationDescription());
			}
		}
		
		if (!pendingViolations.empty()) {
			violations = std::move(pendingViolations);
			metrics.violationsCount += violations.size();
		}
		
		return allValid;
	} catch (const std::exception& e) {
		std::cerr << "[Pipeline::validate] Error: " << e.what() << std::endl;
		throw;
	}
}






bool ValidationPipeline::validateIncremental(const Score& score, size_t startMeasure) {
	if (!compiled.load(std::memory_order_acquire)) {
		compileRules();
	}
	
	bool isValid = true;
	std::vector<std::pair<std::string, size_t>> pendingViolations;
	
	for (auto& metadata : rules) {
		bool ruleResult = evaluateRule(metadata, score, startMeasure);
		if (!ruleResult) {
			auto violation = metadata.rule->getViolationDescription();
			if (!violation.empty()) {
				pendingViolations.emplace_back(violation, metadata.priority);
				isValid = false;
			}
		}
	}

	if (!pendingViolations.empty()) {
		metrics.violationsCount += pendingViolations.size();
		
		violations.clear();
		feedbackItems.clear();
		for (const auto& [violation, priority] : pendingViolations) {
			violations.push_back(violation);
			FeedbackLevel level = priority > 5 ? FeedbackLevel::ERROR : FeedbackLevel::WARNING;
			ValidationFeedback feedback{violation, level, startMeasure, priority};
			feedbackItems.push_back(feedback);
		}
	}
	
	return isValid;
}




void ValidationPipeline::sortRulesByDependencies(std::vector<RuleMetadata>& rulesCopy, std::vector<size_t>& order) {
	std::vector<bool> visited(rulesCopy.size(), false);
	std::vector<bool> inStack(rulesCopy.size(), false);
	order.clear();
	
	std::function<void(size_t)> visit = [&](size_t i) {
		if (inStack[i]) {
			throw std::runtime_error("Circular dependency detected in rules");
		}
		if (visited[i]) return;
		
		inStack[i] = true;
		visited[i] = true;
		
		for (const auto& dep : rulesCopy[i].dependencies) {
			for (size_t j = 0; j < rulesCopy.size(); ++j) {
				if (rulesCopy[j].rule->getName() == dep) {
					visit(j);
					break;
				}
			}
		}
		
		inStack[i] = false;
		order.push_back(i);
	};
	
	for (size_t i = 0; i < rulesCopy.size(); ++i) {
		if (!visited[i]) {
			visit(i);
		}
	}
	
	std::reverse(order.begin(), order.end());
}

void ValidationPipeline::compileRules() {
	if (rules.empty()) {
		compiled.store(true, std::memory_order_release);
		return;
	}
	
	auto rulesCopy = rules;
	std::vector<size_t> newOrder;
	sortRulesByDependencies(rulesCopy, newOrder);
	
	evaluationOrder = std::move(newOrder);
	rules = std::move(rulesCopy);
	compiled.store(true, std::memory_order_release);
}



std::vector<std::string> ValidationPipeline::getViolations() const {
	return violations;
}

void ValidationPipeline::clearViolations() {
	violations.clear();
}

} // namespace music::rules
