#include "domain/errors/DefaultErrorHandlers.h"
#include "domain/errors/ErrorHandler.h"
#include "domain/errors/DomainErrors.h"
#include <iostream>
#include <sstream>
#include <chrono>
#include <iomanip>

namespace MusicTrainer {

namespace {
	std::string getTimestamp() {
		auto now = std::chrono::system_clock::now();
		auto time = std::chrono::system_clock::to_time_t(now);
		std::stringstream ss;
		ss << std::put_time(std::localtime(&time), "%Y-%m-%d %H:%M:%S");
		return ss.str();
	}

	void logError(const std::string& errorType, const MusicTrainerError& error) {
		const auto& context = error.getContext();
		std::cerr << "[" << getTimestamp() << "] " << errorType 
				 << " in " << context.function 
				 << " at " << context.file << ":" << context.line
				 << "\nError: " << error.what()
				 << (context.additionalInfo.empty() ? "" : 
					"\nAdditional Info: " + context.additionalInfo)
				 << std::endl;
	}

	// Recovery strategies
	bool attemptMidiReconnection(const MusicTrainerError&) {
		// TODO: Implement MIDI device reconnection logic
		return false;
	}

	bool attemptStateRollback(const MusicTrainerError&) {
		// TODO: Implement state rollback logic
		return false;
	}

	bool attemptPluginReload(const MusicTrainerError&) {
		// TODO: Implement plugin reload logic
		return false;
	}

	bool attemptRepositoryReconnection(const MusicTrainerError&) {
		// TODO: Implement repository reconnection logic
		return false;
	}

	void handleMidiError(const MusicTrainerError& error) {
		logError("MIDI", error);
	}

	void handleValidationError(const MusicTrainerError& error) {
		logError("Validation", error);
	}

	void handleStateError(const MusicTrainerError& error) {
		logError("State", error);
	}

	void handlePluginError(const MusicTrainerError& error) {
		logError("Plugin", error);
	}

	void handleExerciseGenerationError(const MusicTrainerError& error) {
		logError("Exercise Generation", error);
	}

	void handleRepositoryError(const MusicTrainerError& error) {
		logError("Repository", error);
	}

	void handleGlobalError(const MusicTrainerError& error) {
		logError("Global", error);
	}
}

void configureDefaultErrorHandlers() {
	auto& handler = ErrorHandler::getInstance();
	
	// Register handlers with severity levels
	handler.registerHandler(typeid(MidiError).name(), handleMidiError, ErrorSeverity::Critical);
	handler.registerHandler(typeid(ValidationError).name(), handleValidationError, ErrorSeverity::Warning);
	handler.registerHandler(typeid(StateError).name(), handleStateError, ErrorSeverity::Error);
	handler.registerHandler(typeid(PluginError).name(), handlePluginError, ErrorSeverity::Error);
	handler.registerHandler(typeid(ExerciseGenerationError).name(), handleExerciseGenerationError, ErrorSeverity::Warning);
	handler.registerHandler(typeid(RepositoryError).name(), handleRepositoryError, ErrorSeverity::Error);
	
	// Register recovery strategies
	handler.registerRecoveryStrategy(typeid(MidiError).name(), attemptMidiReconnection);
	handler.registerRecoveryStrategy(typeid(StateError).name(), attemptStateRollback);
	handler.registerRecoveryStrategy(typeid(PluginError).name(), attemptPluginReload);
	handler.registerRecoveryStrategy(typeid(RepositoryError).name(), attemptRepositoryReconnection);
	
	handler.setGlobalHandler(handleGlobalError);
}

} // namespace MusicTrainer