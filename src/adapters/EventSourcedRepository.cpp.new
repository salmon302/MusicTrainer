#include "adapters/EventSourcedRepository.h"
#include "domain/errors/DomainErrors.h"
#include "domain/errors/ErrorHandler.h"
#include <algorithm>

namespace music::adapters {

std::unique_ptr<EventSourcedRepository> EventSourcedRepository::create() {
	return std::unique_ptr<EventSourcedRepository>(new EventSourcedRepository());
}

void EventSourcedRepository::save(const std::string& name, const Score& score) {
	auto newSnapshot = events::Snapshot::create(score);
	updateState(name, [&](ScoreState& state) {
		state.snapshot = std::move(newSnapshot);
		state.version = state.events.size();
	});
}

std::unique_ptr<Score> EventSourcedRepository::load(const std::string& name) {
	auto it = scoreStates.find(name);
	if (it == scoreStates.end()) {
		throw MusicTrainer::RepositoryError("Score not found: " + name);
	}
	
	ScoreState stateCopy;
	if (it->second.snapshot) {
		stateCopy.snapshot = it->second.snapshot->clone();
	}
	stateCopy.events = it->second.events;
	stateCopy.version = it->second.version;

	return reconstructScore(stateCopy);
}

std::vector<std::string> EventSourcedRepository::listScores() {
	std::vector<std::string> names;
	names.reserve(scoreStates.size());
	for (const auto& pair : scoreStates) {
		names.push_back(pair.first);
	}
	return names;
}

void EventSourcedRepository::remove(const std::string& name) {
	scoreStates.erase(name);
}

void EventSourcedRepository::appendEvents(const std::string& name, const std::vector<std::unique_ptr<events::Event>>& newEvents) {
	std::vector<std::unique_ptr<events::Event>> eventCopies;
	eventCopies.reserve(newEvents.size());
	for (const auto& event : newEvents) {
		if (event) {
			eventCopies.push_back(event->clone());
		}
	}
	
	updateState(name, [&](ScoreState& state) {
		for (auto& event : eventCopies) {
			state.events.push_back(std::move(event));
		}
		state.version = state.events.size();
	});
}

void EventSourcedRepository::createSnapshot(const std::string& name) {
	auto it = scoreStates.find(name);
	if (it == scoreStates.end()) {
		throw std::runtime_error("Score not found: " + name);
	}
	
	ScoreState stateCopy;
	if (it->second.snapshot) {
		stateCopy.snapshot = it->second.snapshot->clone();
	}
	stateCopy.events = it->second.events;
	stateCopy.version = it->second.version;
	
	auto score = reconstructScore(stateCopy);
	if (!score) {
		throw std::runtime_error("Failed to reconstruct score for snapshot");
	}
	
	auto newSnapshot = events::Snapshot::create(*score);
	
	updateState(name, [&](ScoreState& state) {
		state.snapshot = std::move(newSnapshot);
		state.version = state.events.size();
	});
}

std::vector<std::unique_ptr<events::Event>> EventSourcedRepository::getEvents(const std::string& name, size_t fromVersion) {
	auto it = scoreStates.find(name);
	if (it == scoreStates.end()) {
		return {};
	}
	
	std::vector<std::unique_ptr<events::Event>> result;
	result.reserve(it->second.events.size() - fromVersion);
	
	for (size_t i = fromVersion; i < it->second.events.size(); ++i) {
		if (it->second.events[i]) {
			result.push_back(it->second.events[i]->clone());
		}
	}
	
	return result;
}

std::unique_ptr<Score> EventSourcedRepository::reconstructScore(const ScoreState& state) {
	std::unique_ptr<Score> score;
	if (state.snapshot) {
		score = state.snapshot->reconstruct();
	} else {
		score = Score::create();
	}
	
	if (!score) {
		return nullptr;
	}
	
	for (const auto& event : state.events) {
		if (event) {
			event->apply(*score);
		}
	}
	
	return score;
}

} // namespace music::adapters