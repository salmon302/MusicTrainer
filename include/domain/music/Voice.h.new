#ifndef MUSICTRAINERV3_VOICE_H
#define MUSICTRAINERV3_VOICE_H

#include <vector>
#include <memory>
#include <shared_mutex>
#include <thread>
#include <chrono>
#include "Pitch.h"
#include "Duration.h"
#include "utils/TrackedLock.h"

namespace music {

// Forward declaration
class Score;

class Voice {
	friend class Score;  // Add friend declaration at top of class

public:
	struct Note {
		Pitch pitch;
		Duration duration;
		Note(const Pitch& p, const Duration& d) : pitch(p), duration(d) {}
	};

	struct TimeSignature {
		TimeSignature() = default;
		uint8_t beats;
		Duration beatUnit;
		TimeSignature(uint8_t b, const Duration& unit) : beats(b), beatUnit(unit) {}
		static TimeSignature commonTime() {
			return TimeSignature(4, Duration::createQuarter());
		}
	};

	static std::unique_ptr<Voice> create(const TimeSignature& timeSignature = TimeSignature::commonTime());
	void addNote(const Pitch& pitch, const Duration& duration);
	size_t getNoteCount() const;
	const Note* getNote(size_t index) const;
	std::vector<Note> getNotesInRange(size_t startMeasure, size_t endMeasure) const;
	size_t getMeasureForNote(size_t noteIndex) const;
	const TimeSignature& getTimeSignature() const;
	void setTimeSignature(const TimeSignature& newTimeSignature);
	size_t getHash() const;
	Voice(const Voice& other);
	Voice& operator=(const Voice& other);
	std::unique_ptr<Voice> clone() const;

private:
	Voice(const TimeSignature& timeSignature);
	std::vector<Note> notes;
	TimeSignature timeSignature;
	mutable std::vector<size_t> measureNumbers;
	mutable bool measureNumbersValid = false;
	mutable std::shared_mutex mutex_;

	std::vector<size_t> ensureMeasureNumbersUpdated() const;
	void updateMeasureNumbers() const;
	void performCopy(const Voice& other);
};

} // namespace music

#endif // MUSICTRAINERV3_VOICE_H